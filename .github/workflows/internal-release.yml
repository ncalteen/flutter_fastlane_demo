name: Internal Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Release Tag (with Build Number)
        default: v1.0.0+1
        required: true

env:
  # Version Information
  ANDROID_SDK_VERSION: 34.0.0
  FLUTTER_VERSION: 3.x
  JAVA_VERSION: 21
  RUBY_VERSION: 3.3

  # Build Information
  TAG_NAME: ${{ github.event.inputs.tag }}

jobs:
  prebuild:
    name: Prebuild
    runs-on: ubuntu-latest

    # Build name and number to pass to Flutter commands.
    outputs:
      build_name: ${{ steps.split-tag.outputs.build_name }}
      build_number: ${{ steps.split-tag.outputs.build_number }}

    steps:
      # Checkout the repo at the release tag.
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          ref: ${{ env.TAG_NAME }}

      # Fails the workflow if the release tag is missing or invalid.
      # - Must have a build number (plus sign) in the tag.
      # - Must not have a prerelease identifier (hyphen) in the tag.
      - name: Fail Workflow (Invalid Tag)
        id: fail-invalid-tag
        if: |
          env.TAG_NAME == '' ||
          contains(env.TAG_NAME, '+') == false ||
          contains(env.TAG_NAME, '-') == true
        run: |
          echo "Invalid Release Tag: \"$TAG_NAME\"...Failing Workflow"
          exit 1

      - name: Verify Version Tag Exists
        id: verify-tag-exists
        run: |
          git fetch --depth=1 origin +refs/tags/${TAG_NAME}
          git tag --list | grep -q ${TAG_NAME} || (echo "Tag not found: ${TAG_NAME}" && exit 1)

      - name: Split Tag
        id: split-tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = process.env.TAG_NAME ?? ''
            const parts = tag.split('+')
            const build_name = parts[0].replace('v', '')
            const build_number = parts[1]

            core.setOutput('build_name', build_name)
            core.setOutput('build_number', build_number)

  android:
    name: Build and Deploy (Android)
    runs-on: ubuntu-latest

    needs:
      - prebuild

    defaults:
      run:
        working-directory: ${{ github.workspace }}/android

    # Use 'staging' secrets for internal releases.
    environment: staging

    env:
      # Android Information
      ANDROID_KEYSTORE_FILE_BASE64: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
      ANDROID_SERVICE_ACCOUNT_JSON: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
      ANDROID_SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
      ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
      SUPPLY_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}

      # Build Information
      BUILD_NAME: ${{ needs.prebuild.outputs.build_name }}
      BUILD_NUMBER: ${{ needs.prebuild.outputs.build_number }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Java
        id: setup-java
        uses: actions/setup-java@v4
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        id: setup-flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          channel: stable

      - name: Run Tests
        id: test
        run: |
          fastlane test

      - name: Build and Upload
        id: build-upload
        run: |
          fastlane internal

  ios:
    name: Build and Deploy (iOS)
    runs-on: macos-latest

    needs:
      - prebuild

    defaults:
      run:
        working-directory: ${{ github.workspace }}/ios

    # Use 'staging' secrets for internal releases.
    environment: staging

    # prettier-ignore
    env:
      # Apple Information
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_USERNAME: ${{ secrets.APPLE_USERNAME }}
      APP_BUNDLE_IDENTIFIER: ${{ secrets.APP_BUNDLE_IDENTIFIER }}
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_KEY_FILE: ${{ secrets.APP_STORE_CONNECT_KEY_FILE }}
      TEAM_ID: ${{ secrets.TEAM_ID }}

      # Build Information
      BUILD_NAME: ${{ needs.prebuild.outputs.build_name }}
      BUILD_NUMBER: ${{ needs.prebuild.outputs.build_number }}

      # Fastlane Information
      FASTLANE_MATCH_AWS_ACCESS_KEY_ID: ${{ secrets.FASTLANE_MATCH_AWS_ACCESS_KEY_ID }}
      FASTLANE_MATCH_AWS_SECRET_ACCESS_KEY: ${{ secrets.FASTLANE_MATCH_AWS_SECRET_ACCESS_KEY }}
      FASTLANE_MATCH_BUCKET_NAME: ${{ secrets.FASTLANE_MATCH_BUCKET_NAME }}
      FASTLANE_MATCH_PASSWORD: ${{ secrets.FASTLANE_MATCH_PASSWORD }}
      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      FASTLANE_USER: ${{ secrets.FASTLANE_USER }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Java
        id: setup-java
        uses: actions/setup-java@v4
        with:
          cache: gradle
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        id: setup-flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          channel: stable

      - name: Setup Apple Certificates
        id: setup-certificates
        run: |
          fastlane setup_certificates

      - name: Run Tests
        id: test
        run: |
          fastlane test

      - name: Build and Upload
        id: build-upload
        run: |
          fastlane internal
