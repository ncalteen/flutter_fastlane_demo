default_platform(:ios)

platform :ios do
  desc 'Cleanup Workspace'
  lane :clean do
    xcclean(
      workspace: 'Runner.xcworkspace',
      scheme: 'Runner'
    )
    clean_build_artifacts
  end

  desc 'Setup Certificates'
  lane :setup_certificates do
    # Sets up a temporary keychain on CI builds
    setup_ci(timeout: 0) if ENV['CI']

    match(
      type: 'development',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: true
    )

    match(
      type: 'appstore',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: true
    )
  end

  desc 'Generate New Certificates'
  lane :generate_certificates do
    match(
      type: 'development',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: false,
      force_for_new_devices: true
    )

    match(
      type: 'appstore',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: false
    )
  end

  desc 'Run Unit Tests'
  lane :test do
    scan(workspace: 'Runner.xcworkspace',
         scheme: 'Runner')

    # (Optional) Replace the above command to run unit tests and report results
    #            to your Slack channel
    # scan(workspace: 'Runner.xcworkspace',
    #      scheme: 'Runner',
    #      slack_url: ENV['SLACK_URL'],
    #      slack_channel: ENV['SLACK_CHANNEL'])
  end

  desc 'Deploy to TestFlight (Internal)'
  lane :internal do
    # Generate a JWT to connect to App Store Connect
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_KEY_FILE'],
      duration: 1200
    )

    # Increment the build number from the previous build in TestFlight
    # increment_build_number(
    #   build_number: latest_testflight_build_number(
    #     app_identifier: ENV['APP_BUNDLE_IDENTIFIER']
    #   ) + 1,
    #   xcodeproj: 'Runner.xcodeproj'
    # )

    # Install Flutter dependencies
    sh('flutter pub get')

    # Build the app with Flutter
    sh('flutter build ipa --debug --export-options-plist="$DEVELOPMENT_PLIST_PATH"')
    # Version and the build number may be overridden in `flutter build` by
    # specifying --build-name and --build-number, respectively.

    # Point Fastlane to the archive generated by Flutter
    build_app(
      skip_build_archive: true,
      archive_path: '../build/ios/archive/Runner.xcarchive'
    )

    # Add git commits to changelog
    # TODO: Use something similar to pull from release notes
    # changelog = download(url: 'https://lookatmycms.com/changelog.txt')
    changelog_from_git_commits(
      merge_commit_filtering: 'exclude_merges'
    )

    # Upload the app to TestFlight
    # upload_to_testflight(
    #   app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
    #   apple_id: ENV['APPLE_ID'],
    #   ipa: './Runner.ipa',
    #   username: ENV['USERNAME'],
    #   team_id: ENV['TEAM_ID']
    # )
  rescue StandardError => e
    # (Optional) Uncomment the following to report the error to your Slack channel
    # slack(
    #   slack_url: ENV['SLACK_URL'],
    #   message: 'Deploy to TestFlight (Internal) Failure: ' + e.message,
    #   channel: ENV['SLACK_CHANNEL']
    # )
    raise e
  end

  desc 'Deploy to TestFlight (Production)'
  lane :production do
    # TODO: capture_screenshots
    # https://docs.fastlane.tools/getting-started/ios/screenshots/

    # Generate a JWT to connect to App Store Connect
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_KEY_FILE'],
      duration: 1200
    )

    # Increment the build number from the previous build in TestFlight
    increment_build_number(
      build_number: latest_testflight_build_number(
        app_identifier: ENV['APP_BUNDLE_IDENTIFIER']
      ) + 1,
      xcodeproj: 'Runner.xcodeproj'
    )

    # Install Flutter dependencies
    sh('flutter pub get')

    # Build the app with Flutter
    sh('flutter build ipa --release --export-options-plist="$APPSTORE_PLIST_PATH"')

    # Point Fastlane to the archive generated by Flutter
    build_app(
      skip_build_archive: true,
      archive_path: '../build/ios/archive/Runner.xcarchive'
    )

    # Add git commits to changelog
    # TODO: Use something similar to pull from release notes
    # changelog = download(url: 'https://lookatmycms.com/changelog.txt')
    changelog_from_git_commits(
      merge_commit_filtering: 'exclude_merges'
    )

    # Upload the app to TestFlight
    upload_to_testflight(
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      apple_id: ENV['APPLE_ID'],
      ipa: './Runner.ipa',
      username: ENV['USERNAME'],
      team_id: ENV['TEAM_ID']
    )
  rescue StandardError => e
    # (Optional) Uncomment the following to report the error to your Slack channel
    # slack(
    #   slack_url: ENV['SLACK_URL'],
    #   message: 'Deploy to TestFlight (Production) Failure: ' + e.message,
    #   channel: ENV['SLACK_CHANNEL']
    # )
    raise e
  end
end

def on_error(slack_url, message, channel, exception)
  slack(
    slack_url:,
    channel:,
    message:,
    success: false,
    payload: {},
    default_payloads: [],
    # See: https://api.slack.com/docs/attachments
    attachment_properties: {
      color: '#FC100D',
      fields: [
        {
          title: 'Error',
          value: exception.to_s
        }
      ]
    }
  )
end
