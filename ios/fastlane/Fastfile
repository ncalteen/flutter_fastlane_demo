default_platform(:ios)

platform :ios do
  desc 'Installs Flutter dependencies'
  private_lane :fetch_dependencies do
    sh('flutter pub get')
  end

  desc 'Authenticate with App Store Connect'
  private_lane :authenticate_app_store_connect do
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_KEY_FILE'],
      duration: 1200
    )
  end

  desc 'Cleanup Workspace'
  private_lane :clean do
    xcclean(
      workspace: 'Runner.xcworkspace',
      scheme: 'Runner'
    )
    clean_build_artifacts
  end

  desc 'Run Unit Tests'
  private_lane :test do
    # (Optional) Run Flutter tests. This is disabled for now because tests don't pass in this demo app.
    # sh('flutter test --no-pub --coverage')
    scan(workspace: 'Runner.xcworkspace',
         scheme: 'Runner')
  end

  desc 'Setup Certificates'
  lane :setup_certificates do
    setup_ci(timeout: 0) if ENV['CI']

    match(
      type: 'development',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: true
    )

    match(
      type: 'appstore',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: true
    )
  end

  desc 'Generate Certificates'
  lane :generate_certificates do
    match(
      type: 'development',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: false,
      force_for_new_devices: true
    )

    match(
      type: 'appstore',
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      readonly: false
    )
  end

  desc 'Deploy to TestFlight (Internal)'
  lane :internal do
    clean
    fetch_dependencies

    authenticate_app_store_connect
    update_code_signing_settings(
      build_configurations: ['Debug'],
      bundle_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      code_sign_identity: 'Apple Development',
      path: 'Runner.xcodeproj',
      profile_name: "match Development #{ENV['APP_BUNDLE_IDENTIFIER']}",
      team_id: ENV['TEAM_ID'],
      use_automatic_signing: false
    )

    # If the BUILD_NAME and BUILD_NUMBER environment variables are set, use them when building with Flutter. Otherwise,
    # use the default values in pubspec.yaml.
    if ENV['BUILD_NAME'] && ENV['BUILD_NUMBER']
      sh("flutter build ipa --debug --build-name #{ENV['BUILD_NAME']} --build-number #{ENV['BUILD_NUMBER']}")
    else
      sh('flutter build ipa --debug')
    end

    # Point Fastlane to the archive generated by Flutter
    build_app(
      skip_build_archive: true,
      archive_path: '../build/ios/archive/Runner.xcarchive'
    )

    # Upload to TestFlight
    upload_to_testflight(
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      apple_id: ENV['APPLE_ID'],
      changelog: changelog_from_git_commits(
        between: ['main', 'HEAD'],
        merge_commit_filtering: 'exclude_merges'
      ),
      distribute_external: true,
      groups: 'Nicks Group',
      ipa: './Runner.ipa',
      notify_external_testers: true,
      reject_build_waiting_for_review: true,
      skip_waiting_for_build_processing: false,
      team_id: ENV['TEAM_ID'],
      username: ENV['APPLE_USERNAME']
    )
  rescue StandardError => e
    # (Optional) Uncomment the following to report the error to your Slack channel
    # slack(
    #   slack_url: ENV['SLACK_URL'],
    #   message: 'Deploy to TestFlight (Internal) Failure: ' + e.message,
    #   channel: ENV['SLACK_CHANNEL']
    # )
    raise e
  end

  desc 'Deploy to App Store Connect (Production)'
  lane :production do
    clean
    fetch_dependencies

    authenticate_app_store_connect
    update_code_signing_settings(
      build_configurations: ['Release'],
      bundle_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      code_sign_identity: 'Apple Distribution',
      path: 'Runner.xcodeproj',
      profile_name: "match AppStore #{ENV['APP_BUNDLE_IDENTIFIER']}",
      team_id: ENV['TEAM_ID'],
      use_automatic_signing: false
    )

    # If the BUILD_NAME and BUILD_NUMBER environment variables are set, use them when building with Flutter. Otherwise,
    # use the default values in pubspec.yaml.
    if ENV['BUILD_NAME'] && ENV['BUILD_NUMBER']
      sh("flutter build ipa --release --build-name #{ENV['BUILD_NAME']} --build-number #{ENV['BUILD_NUMBER']}")
    else
      sh('flutter build ipa --release')
    end

    # Point Fastlane to the archive generated by Flutter
    build_app(
      skip_build_archive: true,
      archive_path: '../build/ios/archive/Runner.xcarchive'
    )

    # Upload to App Store Connect for Review
    upload_to_app_store(
      app_identifier: ENV['APP_BUNDLE_IDENTIFIER'],
      automatic_release: true,
      ipa: './Runner.ipa',
      release_notes: {
        'en-US': ENV['RELEASE_NOTES']
      },
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: false,
      team_id: ENV['TEAM_ID'],
      username: ENV['APPLE_USERNAME'],
      # TODO: Remove this line to submit for review
      verify_only: true
    )
  rescue StandardError => e
    # (Optional) Uncomment the following to report the error to your Slack channel
    # slack(
    #   slack_url: ENV['SLACK_URL'],
    #   message: 'Deploy to TestFlight (Production) Failure: ' + e.message,
    #   channel: ENV['SLACK_CHANNEL']
    # )
    raise e
  end
end

def on_error(slack_url, message, channel, exception)
  slack(
    slack_url:,
    channel:,
    message:,
    success: false,
    payload: {},
    default_payloads: [],
    # See: https://api.slack.com/docs/attachments
    attachment_properties: {
      color: '#FC100D',
      fields: [
        {
          title: 'Error',
          value: exception.to_s
        }
      ]
    }
  )
end
